{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/noamprywes/anaconda3/lib/python3.6/site-packages/Bio/Seq.py:2715: BiopythonWarning: Partial codon, len(sequence) not a multiple of three. Explicitly trim the sequence or add trailing N before translation. This may become an error in future.\n",
      "  BiopythonWarning)\n"
     ]
    }
   ],
   "source": [
    "# Input the name of the file for analysis here\n",
    "# I will want to make this take more than one file at a time\n",
    "SEQUENCE_FILE = \"NP-11-19-5-merged.fastq\"\n",
    "FILE_NAME = str(SEQUENCE_FILE.split('.')[0])\n",
    "\n",
    "from Bio import SeqIO\n",
    "\n",
    "#this is the template for alignment and should be a fasta file with only one sequence in it\n",
    "templateParsed = SeqIO.parse('rbcL_codonopt_barcoded.txt', 'fasta')\n",
    "TEMPLATE_STRING = None\n",
    "for record in templateParsed:\n",
    "    assert TEMPLATE_STRING == None\n",
    "    TEMPLATE_STRING = str(record.seq)\n",
    "    RCtemplateString = record.seq.reverse_complement()\n",
    "    TEMPLATE_TRANSLATION = str(record.seq.translate(to_stop=True))\n",
    "\n",
    "# This is the length of sequence in the read used to align it to the template\n",
    "SEARCH_MOTIF_LENGTH = 11\n",
    "\n",
    "# Quality cutoff parameters\n",
    "# If the average quality dips below this I throw out the pair of reads\n",
    "AVG_PHRED_CUTOFF = 25\n",
    "# If there are more bad single nucleotide reads than this cutoff I also throw the reads out\n",
    "LETTER_QUALITY_CUTOFF = 20\n",
    "BAD_BASES_ALLOWED = 5\n",
    "# The 5'-most and 3'-most bases in the read are prone to low quality so trimming the first and last AAs is good practice\n",
    "NTERMINAL_AAs_TO_TRIM = 1\n",
    "CTERMINAL_AAs_TO_TRIM = 1\n",
    "BARCODE_LENGTH = 15\n",
    "\n",
    "\n",
    "# These dummy values work great for the pie chart but they have a bad effect on the histograms\n",
    "DUMMY_MUTATION = 'X0X'\n",
    "DUMMY_BARCODE = 'NNNNN'\n",
    "DUMMY_CODON = 'NNN'\n",
    "DUMMY_TRANSLATION = 'XXX'\n",
    "DUMMY_TEMPLATE_AA = 'X'\n",
    "\n",
    "# This is the FULL sequence between the barcode and the last coding nucleotide (including stop codons)\n",
    "BARCODE_FLANK = 'CCTGCAGGCTATTA'\n",
    "\n",
    "# This is the list of allowed mutations\n",
    "PROGRAMMED_MUTATION_CODONS = ['CGT','CAT','AAA','GAT','GAA','AGC','ACC','AAT',\n",
    "                              'CAG','TGC','GGC','CCG','GCG','GTG','ATT','CTG','ATG','TTT', 'TAT', 'TGG']\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This function processes a SeqIO file into a series of lists that can go into a dictionary\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython.display import set_matplotlib_formats\n",
    "set_matplotlib_formats('png', 'pdf')\n",
    "import itertools\n",
    "import math\n",
    "import pandas as pd\n",
    "import time\n",
    "\n",
    "\n",
    "\n",
    "def countBadReads(qualityScores):\n",
    "    badReads = 0\n",
    "    for qualityScore in qualityScores:\n",
    "        if qualityScore < LETTER_QUALITY_CUTOFF:\n",
    "            badReads += 1\n",
    "    return badReads\n",
    "\n",
    "def processRecord(timers, rec, sequences, AVGphredQ, basesWphredQunderCutoff, translations, barcodePresence,\n",
    "                  barcodeList, nonBarcodeReadAlignment, mutation, mutCodon, allowedMut, numberOfMutations, readIDs = None):\n",
    "    \n",
    "    \n",
    "    if readIDs is not None:\n",
    "        readIDs.append(rec.name)\n",
    "    sequences.append(str(rec.seq))\n",
    "    \n",
    "    qualityStartTime = time.perf_counter()\n",
    "    \n",
    "    AVGphredQ.append(np.mean(rec.letter_annotations['phred_quality']))\n",
    "    basesWphredQunderCutoff.append(countBadReads(rec.letter_annotations['phred_quality']))\n",
    "\n",
    "    timers['qualityTime'] += time.perf_counter() - qualityStartTime\n",
    "    mutStartTime = time.perf_counter()\n",
    "    \n",
    "    mutant = DUMMY_MUTATION\n",
    "    mutationCounter = 0\n",
    "    mutationCodon = DUMMY_CODON\n",
    "    mutationDNAlocation = 0\n",
    "    barcodeToAppend = DUMMY_BARCODE\n",
    "    aaSeq = DUMMY_TRANSLATION\n",
    "    barcodeStart = rec.seq.find(BARCODE_FLANK)\n",
    "    barcodeBool = False\n",
    "    translationStart = -1\n",
    "    codingSequence = None\n",
    "    allowedMutBool = False\n",
    "    nonBarcodeReadStart = -1\n",
    "    templateAminoAcid = DUMMY_TEMPLATE_AA\n",
    "    \n",
    "    # This finds barcodes and translations and accounts for frame\n",
    "    if barcodeStart != -1:\n",
    "        barcodeToAppend = str(rec.seq[barcodeStart - BARCODE_LENGTH:barcodeStart])\n",
    "        if barcodeToAppend != '' and barcodeToAppend != None and len(barcodeToAppend) == BARCODE_LENGTH:\n",
    "            barcodeBool = True\n",
    "        else:\n",
    "            barcodeToAppend = DUMMY_BARCODE\n",
    "        stopCodonPosition = barcodeStart + len(BARCODE_FLANK)\n",
    "        lenOfCodingSequence = len(rec.seq) - stopCodonPosition\n",
    "        lengthInFrame = lenOfCodingSequence - (lenOfCodingSequence % 3)\n",
    "        translationStart = len(TEMPLATE_TRANSLATION) - (lengthInFrame // 3)\n",
    "        codingSequence = (rec.seq[stopCodonPosition:stopCodonPosition + lengthInFrame].reverse_complement())\n",
    "\n",
    "    else:\n",
    "        # This extracts the location and aa sequence in a read without a barcode and accounts for frame\n",
    "        nonBarcodeReadStart = TEMPLATE_STRING.find(str(rec.seq[:SEARCH_MOTIF_LENGTH])) \n",
    "        if nonBarcodeReadStart != -1:\n",
    "            frame = nonBarcodeReadStart % 3\n",
    "            translationStart = nonBarcodeReadStart // 3 + 1 \n",
    "            codingSequence = rec.seq[3 - frame:] \n",
    "    \n",
    "    if codingSequence != None:\n",
    "        aaSeq = codingSequence.translate(to_stop = True)\n",
    "        # Find mutations in translation\n",
    "        for position, aminoAcid in enumerate(aaSeq):\n",
    "            if translationStart + position < len(TEMPLATE_TRANSLATION):\n",
    "                templateAminoAcid = TEMPLATE_TRANSLATION[translationStart + position]\n",
    "            if aaSeq != DUMMY_TRANSLATION and \\\n",
    "                        aminoAcid != templateAminoAcid and \\\n",
    "                        position >= NTERMINAL_AAs_TO_TRIM and \\\n",
    "                        position <= len(aaSeq) - CTERMINAL_AAs_TO_TRIM:\n",
    "                templateAAIndex = translationStart + position\n",
    "                # The + 1 in the mutant name just makes the amino acid correct in biological notation\n",
    "                mutant = str(templateAminoAcid) + str(templateAAIndex + 1) + str(aminoAcid)\n",
    "                mutationDNAlocation = templateAAIndex * 3\n",
    "                mutationCodon = str(codingSequence[mutationDNAlocation - (translationStart * 3) : \\\n",
    "                                               mutationDNAlocation - (translationStart * 3) + 3])\n",
    "                if mutationCodon in PROGRAMMED_MUTATION_CODONS:\n",
    "                    allowedMutBool = True\n",
    "                else:\n",
    "                    allowedMutBool = False\n",
    "                mutationCounter += 1\n",
    "                \n",
    "    timers['timeSpentAddingMutations'] += time.perf_counter() - mutStartTime\n",
    "    \n",
    "\n",
    "            \n",
    "    translations.append(str(aaSeq))\n",
    "    barcodePresence.append(barcodeBool)\n",
    "    barcodeList.append(barcodeToAppend)\n",
    "    nonBarcodeReadAlignment.append(nonBarcodeReadStart)\n",
    "    mutation.append(mutant)\n",
    "    mutCodon.append(mutationCodon)\n",
    "    allowedMut.append(allowedMutBool)\n",
    "    numberOfMutations.append(mutationCounter)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/noamprywes/anaconda3/lib/python3.6/site-packages/Bio/Seq.py:2715: BiopythonWarning: Partial codon, len(sequence) not a multiple of three. Explicitly trim the sequence or add trailing N before translation. This may become an error in future.\n",
      "  BiopythonWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'qualityTime': 89.2337005911395, 'timeSpentAddingMutations': 241.88854054827243}\n",
      "finished adding to dataframe: 405.65404050424695 seconds\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Read ID</th>\n",
       "      <th>High quality read pair</th>\n",
       "      <th>Barcode</th>\n",
       "      <th>Single mutation</th>\n",
       "      <th>Single mutation codon</th>\n",
       "      <th>Allowed single mutation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1040:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>ACCTACCACAGATCT</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1210:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>GTTTGCAAGTGTACT</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1220:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>CCATACATCAGATCT</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1230:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>GGTCAGCGCAACGAA</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1290:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>GTGAGGCGTGGCACT</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1370:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>CCTACATATGGAACT</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1440:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>ATAGACCGTGCGGTG</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1580:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>GCACCCTTCCACACT</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1590:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>TAAGTGAAAAAATGC</td>\n",
       "      <td>G384V</td>\n",
       "      <td>GTT</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1620:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>CGTATTCAATAACTG</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1640:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>TTAGAACATGCTGGC</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1650:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>GAAAGGAATCCTCTA</td>\n",
       "      <td>More than one</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1680:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>CGCGTCACTCATATT</td>\n",
       "      <td>More than one</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1760:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>TTGTTGGGATGATTG</td>\n",
       "      <td>More than one</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1860:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>CTAACGAACCTGGGC</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:1970:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>ACCTAAGAAAAAATT</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:2030:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>TACTGCCTACAAAAT</td>\n",
       "      <td>More than one</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:2070:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>AAACAAAAAAAGAGA</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:2230:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>CAATTGGGTTAAGCG</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:2360:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>ACCTAACACGGTAGG</td>\n",
       "      <td>T460S</td>\n",
       "      <td>AGT</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:2410:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>AAGCCCACACGAGTA</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:2550:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>AAACCCACCGTAAAT</td>\n",
       "      <td>T460S</td>\n",
       "      <td>AGT</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:2600:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>TTTAACTGCGCATTG</td>\n",
       "      <td>S356L</td>\n",
       "      <td>CTG</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:2620:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>GCAACGGGCCAGCCA</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:2640:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>CACCCCACAATAGAA</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:2730:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>CACGCCGTCCAAAGT</td>\n",
       "      <td>A392G</td>\n",
       "      <td>GGC</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:2770:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>CATTTGAACCACTAA</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:2910:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>ACGAGTTTCCGAAAT</td>\n",
       "      <td>G384V</td>\n",
       "      <td>GTT</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:3260:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>AAACGGGTGAATAGG</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:3280:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>ATTACAAACGAGGAT</td>\n",
       "      <td>G384P</td>\n",
       "      <td>CCG</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:3330:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>TTTCGACTAGTAAAG</td>\n",
       "      <td>T460I</td>\n",
       "      <td>ATT</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:3360:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>TAACGAAGGAACTAA</td>\n",
       "      <td>T460I</td>\n",
       "      <td>ATT</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:3380:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>ATTGAGGTCAGACAA</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:3390:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>TGAGTAATAGCGCTA</td>\n",
       "      <td>T460I</td>\n",
       "      <td>ATT</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:3490:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>TAGGACCTCCTAAAT</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:3500:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>TCTGGGACCCGCCGG</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:3520:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>GATTTGACGTGTCTC</td>\n",
       "      <td>E458K</td>\n",
       "      <td>AAG</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:3600:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>AATCTACAGAGAACT</td>\n",
       "      <td>G358E</td>\n",
       "      <td>GAA</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:3800:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>AAGATAAGCGGCATT</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:3880:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>GATTTTCCGAAAACA</td>\n",
       "      <td>More than one</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:3900:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>TAGGGTCGCCTGCAT</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:3930:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>GAAGTAAAAAAAATA</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:4050:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>AAGCAACCGGACTTC</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:4210:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>GACACTTAGCACAAC</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:4390:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>ATACGTCAACGGATT</td>\n",
       "      <td>G384A</td>\n",
       "      <td>GCT</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:4460:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>TTGGAGCCACCGGGA</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:4540:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>GACCGCCCAAAACAA</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:4660:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>ACCACGGCACGCCGC</td>\n",
       "      <td>A392V</td>\n",
       "      <td>GTG</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:4690:1000</td>\n",
       "      <td>False</td>\n",
       "      <td>ATCCCTTGGTTACTA</td>\n",
       "      <td>More than one</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>FS10000719:32:BPC29518-1720:1:1101:4730:1000</td>\n",
       "      <td>True</td>\n",
       "      <td>ATTCTCAACCCTCAC</td>\n",
       "      <td>X0X</td>\n",
       "      <td>NNN</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         Read ID  High quality read pair  \\\n",
       "0   FS10000719:32:BPC29518-1720:1:1101:1040:1000                    True   \n",
       "1   FS10000719:32:BPC29518-1720:1:1101:1210:1000                    True   \n",
       "2   FS10000719:32:BPC29518-1720:1:1101:1220:1000                    True   \n",
       "3   FS10000719:32:BPC29518-1720:1:1101:1230:1000                    True   \n",
       "4   FS10000719:32:BPC29518-1720:1:1101:1290:1000                    True   \n",
       "5   FS10000719:32:BPC29518-1720:1:1101:1370:1000                    True   \n",
       "6   FS10000719:32:BPC29518-1720:1:1101:1440:1000                    True   \n",
       "7   FS10000719:32:BPC29518-1720:1:1101:1580:1000                    True   \n",
       "8   FS10000719:32:BPC29518-1720:1:1101:1590:1000                   False   \n",
       "9   FS10000719:32:BPC29518-1720:1:1101:1620:1000                   False   \n",
       "10  FS10000719:32:BPC29518-1720:1:1101:1640:1000                    True   \n",
       "11  FS10000719:32:BPC29518-1720:1:1101:1650:1000                   False   \n",
       "12  FS10000719:32:BPC29518-1720:1:1101:1680:1000                   False   \n",
       "13  FS10000719:32:BPC29518-1720:1:1101:1760:1000                   False   \n",
       "14  FS10000719:32:BPC29518-1720:1:1101:1860:1000                    True   \n",
       "15  FS10000719:32:BPC29518-1720:1:1101:1970:1000                    True   \n",
       "16  FS10000719:32:BPC29518-1720:1:1101:2030:1000                   False   \n",
       "17  FS10000719:32:BPC29518-1720:1:1101:2070:1000                    True   \n",
       "18  FS10000719:32:BPC29518-1720:1:1101:2230:1000                   False   \n",
       "19  FS10000719:32:BPC29518-1720:1:1101:2360:1000                   False   \n",
       "20  FS10000719:32:BPC29518-1720:1:1101:2410:1000                    True   \n",
       "21  FS10000719:32:BPC29518-1720:1:1101:2550:1000                    True   \n",
       "22  FS10000719:32:BPC29518-1720:1:1101:2600:1000                   False   \n",
       "23  FS10000719:32:BPC29518-1720:1:1101:2620:1000                   False   \n",
       "24  FS10000719:32:BPC29518-1720:1:1101:2640:1000                    True   \n",
       "25  FS10000719:32:BPC29518-1720:1:1101:2730:1000                    True   \n",
       "26  FS10000719:32:BPC29518-1720:1:1101:2770:1000                    True   \n",
       "27  FS10000719:32:BPC29518-1720:1:1101:2910:1000                    True   \n",
       "28  FS10000719:32:BPC29518-1720:1:1101:3260:1000                    True   \n",
       "29  FS10000719:32:BPC29518-1720:1:1101:3280:1000                    True   \n",
       "30  FS10000719:32:BPC29518-1720:1:1101:3330:1000                   False   \n",
       "31  FS10000719:32:BPC29518-1720:1:1101:3360:1000                   False   \n",
       "32  FS10000719:32:BPC29518-1720:1:1101:3380:1000                    True   \n",
       "33  FS10000719:32:BPC29518-1720:1:1101:3390:1000                    True   \n",
       "34  FS10000719:32:BPC29518-1720:1:1101:3490:1000                   False   \n",
       "35  FS10000719:32:BPC29518-1720:1:1101:3500:1000                    True   \n",
       "36  FS10000719:32:BPC29518-1720:1:1101:3520:1000                   False   \n",
       "37  FS10000719:32:BPC29518-1720:1:1101:3600:1000                   False   \n",
       "38  FS10000719:32:BPC29518-1720:1:1101:3800:1000                    True   \n",
       "39  FS10000719:32:BPC29518-1720:1:1101:3880:1000                   False   \n",
       "40  FS10000719:32:BPC29518-1720:1:1101:3900:1000                    True   \n",
       "41  FS10000719:32:BPC29518-1720:1:1101:3930:1000                   False   \n",
       "42  FS10000719:32:BPC29518-1720:1:1101:4050:1000                   False   \n",
       "43  FS10000719:32:BPC29518-1720:1:1101:4210:1000                   False   \n",
       "44  FS10000719:32:BPC29518-1720:1:1101:4390:1000                    True   \n",
       "45  FS10000719:32:BPC29518-1720:1:1101:4460:1000                    True   \n",
       "46  FS10000719:32:BPC29518-1720:1:1101:4540:1000                    True   \n",
       "47  FS10000719:32:BPC29518-1720:1:1101:4660:1000                    True   \n",
       "48  FS10000719:32:BPC29518-1720:1:1101:4690:1000                   False   \n",
       "49  FS10000719:32:BPC29518-1720:1:1101:4730:1000                    True   \n",
       "\n",
       "            Barcode Single mutation Single mutation codon  \\\n",
       "0   ACCTACCACAGATCT             X0X                   NNN   \n",
       "1   GTTTGCAAGTGTACT             X0X                   NNN   \n",
       "2   CCATACATCAGATCT             X0X                   NNN   \n",
       "3   GGTCAGCGCAACGAA             X0X                   NNN   \n",
       "4   GTGAGGCGTGGCACT             X0X                   NNN   \n",
       "5   CCTACATATGGAACT             X0X                   NNN   \n",
       "6   ATAGACCGTGCGGTG             X0X                   NNN   \n",
       "7   GCACCCTTCCACACT             X0X                   NNN   \n",
       "8   TAAGTGAAAAAATGC           G384V                   GTT   \n",
       "9   CGTATTCAATAACTG             X0X                   NNN   \n",
       "10  TTAGAACATGCTGGC             X0X                   NNN   \n",
       "11  GAAAGGAATCCTCTA   More than one                   NNN   \n",
       "12  CGCGTCACTCATATT   More than one                   NNN   \n",
       "13  TTGTTGGGATGATTG   More than one                   NNN   \n",
       "14  CTAACGAACCTGGGC             X0X                   NNN   \n",
       "15  ACCTAAGAAAAAATT             X0X                   NNN   \n",
       "16  TACTGCCTACAAAAT   More than one                   NNN   \n",
       "17  AAACAAAAAAAGAGA             X0X                   NNN   \n",
       "18  CAATTGGGTTAAGCG             X0X                   NNN   \n",
       "19  ACCTAACACGGTAGG           T460S                   AGT   \n",
       "20  AAGCCCACACGAGTA             X0X                   NNN   \n",
       "21  AAACCCACCGTAAAT           T460S                   AGT   \n",
       "22  TTTAACTGCGCATTG           S356L                   CTG   \n",
       "23  GCAACGGGCCAGCCA             X0X                   NNN   \n",
       "24  CACCCCACAATAGAA             X0X                   NNN   \n",
       "25  CACGCCGTCCAAAGT           A392G                   GGC   \n",
       "26  CATTTGAACCACTAA             X0X                   NNN   \n",
       "27  ACGAGTTTCCGAAAT           G384V                   GTT   \n",
       "28  AAACGGGTGAATAGG             X0X                   NNN   \n",
       "29  ATTACAAACGAGGAT           G384P                   CCG   \n",
       "30  TTTCGACTAGTAAAG           T460I                   ATT   \n",
       "31  TAACGAAGGAACTAA           T460I                   ATT   \n",
       "32  ATTGAGGTCAGACAA             X0X                   NNN   \n",
       "33  TGAGTAATAGCGCTA           T460I                   ATT   \n",
       "34  TAGGACCTCCTAAAT             X0X                   NNN   \n",
       "35  TCTGGGACCCGCCGG             X0X                   NNN   \n",
       "36  GATTTGACGTGTCTC           E458K                   AAG   \n",
       "37  AATCTACAGAGAACT           G358E                   GAA   \n",
       "38  AAGATAAGCGGCATT             X0X                   NNN   \n",
       "39  GATTTTCCGAAAACA   More than one                   NNN   \n",
       "40  TAGGGTCGCCTGCAT             X0X                   NNN   \n",
       "41  GAAGTAAAAAAAATA             X0X                   NNN   \n",
       "42  AAGCAACCGGACTTC             X0X                   NNN   \n",
       "43  GACACTTAGCACAAC             X0X                   NNN   \n",
       "44  ATACGTCAACGGATT           G384A                   GCT   \n",
       "45  TTGGAGCCACCGGGA             X0X                   NNN   \n",
       "46  GACCGCCCAAAACAA             X0X                   NNN   \n",
       "47  ACCACGGCACGCCGC           A392V                   GTG   \n",
       "48  ATCCCTTGGTTACTA   More than one                   NNN   \n",
       "49  ATTCTCAACCCTCAC             X0X                   NNN   \n",
       "\n",
       "    Allowed single mutation  \n",
       "0                     False  \n",
       "1                     False  \n",
       "2                     False  \n",
       "3                     False  \n",
       "4                     False  \n",
       "5                     False  \n",
       "6                     False  \n",
       "7                     False  \n",
       "8                     False  \n",
       "9                     False  \n",
       "10                    False  \n",
       "11                    False  \n",
       "12                    False  \n",
       "13                    False  \n",
       "14                    False  \n",
       "15                    False  \n",
       "16                    False  \n",
       "17                    False  \n",
       "18                    False  \n",
       "19                    False  \n",
       "20                    False  \n",
       "21                    False  \n",
       "22                     True  \n",
       "23                    False  \n",
       "24                    False  \n",
       "25                     True  \n",
       "26                    False  \n",
       "27                    False  \n",
       "28                    False  \n",
       "29                     True  \n",
       "30                     True  \n",
       "31                     True  \n",
       "32                    False  \n",
       "33                     True  \n",
       "34                    False  \n",
       "35                    False  \n",
       "36                    False  \n",
       "37                     True  \n",
       "38                    False  \n",
       "39                    False  \n",
       "40                    False  \n",
       "41                    False  \n",
       "42                    False  \n",
       "43                    False  \n",
       "44                    False  \n",
       "45                    False  \n",
       "46                    False  \n",
       "47                     True  \n",
       "48                    False  \n",
       "49                    False  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Here I can import any fastq file with reads\n",
    "mockDataParsed = SeqIO.parse(SEQUENCE_FILE, \"fastq\")\n",
    "\n",
    "readIDs = []\n",
    "sequences1 = []\n",
    "sequences2 = []\n",
    "translations1 = []\n",
    "translations2 = []\n",
    "AVGphredQ1 = []\n",
    "AVGphredQ2 = []\n",
    "basesWphredQunderCutoff1 = []\n",
    "basesWphredQunderCutoff2 = []\n",
    "barcodePresence1 = []\n",
    "barcodePresence2 = []\n",
    "nonBarcodeReadAlignment1 = []\n",
    "nonBarcodeReadAlignment2 = []\n",
    "barcodeList1 = []\n",
    "barcodeList2 = []\n",
    "barcodeConsensus = []\n",
    "barcodeAppearances = []\n",
    "mutation1 = []\n",
    "mutation2 = []\n",
    "mutCodon1 = []\n",
    "mutCodon2 = []\n",
    "singleMutation = []\n",
    "mutationAppearances = []\n",
    "allowedMut1 = []\n",
    "allowedMut2 = []\n",
    "allowedMut = []\n",
    "singMutCodon = []\n",
    "numberOfMutations1 = []\n",
    "numberOfMutations2 = []\n",
    "highQuality = []\n",
    "\n",
    "#I'm going to put paired reads into the same row in this dictionary\n",
    "#The file will have to have an even number of reads for this\n",
    "\n",
    "\n",
    "startTime = time.perf_counter()\n",
    "\n",
    "timers = {'qualityTime' : 0.0, 'timeSpentAddingMutations' : 0.0}\n",
    "\n",
    "\n",
    "for rec1, rec2 in itertools.zip_longest(mockDataParsed, mockDataParsed): \n",
    "    processRecord(timers, rec1, sequences1, AVGphredQ1, basesWphredQunderCutoff1, translations1, \n",
    "                  barcodePresence1, barcodeList1, nonBarcodeReadAlignment1, mutation1, mutCodon1,\n",
    "                  allowedMut1, numberOfMutations1, readIDs)\n",
    "    processRecord(timers, rec2, sequences2, AVGphredQ2, basesWphredQunderCutoff2, translations2, \n",
    "                  barcodePresence2, barcodeList2, nonBarcodeReadAlignment2, mutation2, mutCodon2,\n",
    "                  allowedMut2, numberOfMutations2)\n",
    "\n",
    "print(timers)\n",
    "\n",
    "    \n",
    "# Combine the barcodes into one row when there is one barcode\n",
    "for read, barcode in enumerate(barcodeList1):\n",
    "    barcodeConsensus.append(barcode)\n",
    "for read, barcode in enumerate(barcodeList2):\n",
    "    if barcodeConsensus[read] != DUMMY_BARCODE and barcode != DUMMY_BARCODE:\n",
    "        barcodeConsensus[read] = DUMMY_BARCODE\n",
    "    if barcode != DUMMY_BARCODE:\n",
    "        barcodeConsensus[read] = barcode\n",
    "\n",
    "# Combine the mutations and their codons into two columns when there is one mutation\n",
    "# Check if single codon is allowed in a third column\n",
    "# This works by checking if there's a single change in either of the paired reads and updating accordingly\n",
    "# Importantly for later, if there is an unallowed single mutant it will get added to the single mutant column\n",
    "for read, mutation in enumerate(mutation1):\n",
    "    singleMutation.append(DUMMY_MUTATION)\n",
    "    singMutCodon.append(DUMMY_CODON)\n",
    "    allowedMut.append(False)\n",
    "    if mutation1[read] != DUMMY_MUTATION and mutation2[read] == DUMMY_MUTATION:\n",
    "        singleMutation[read] = mutation1[read]\n",
    "        singMutCodon[read] = str(mutCodon1[read])\n",
    "        if str(mutCodon1[read]) in PROGRAMMED_MUTATION_CODONS:\n",
    "            allowedMut[read] = True\n",
    "    if mutation1[read] == DUMMY_MUTATION and mutation2[read] != DUMMY_MUTATION:\n",
    "        singleMutation[read] = mutation2[read]\n",
    "        singMutCodon[read] = str(mutCodon2[read])\n",
    "        if str(mutCodon2[read]) in PROGRAMMED_MUTATION_CODONS:\n",
    "            allowedMut[read] = True\n",
    "    if numberOfMutations1[read] + numberOfMutations2[read] > 1 or \\\n",
    "            mutation1[read] != DUMMY_MUTATION and mutation2[read] != DUMMY_MUTATION:\n",
    "        singleMutation[read] = 'More than one'\n",
    "        singMutCodon[read] = DUMMY_CODON\n",
    "        allowedMut[read] = False\n",
    "    if mutation1[read] == DUMMY_MUTATION and mutation2[read] == DUMMY_MUTATION:\n",
    "        singleMutation[read] = DUMMY_MUTATION\n",
    "        singMutCodon[read] = DUMMY_CODON\n",
    "        allowedMut[read] = False\n",
    "        \n",
    "# Indicate if quality is sufficient\n",
    "for read, quality in enumerate(AVGphredQ1):\n",
    "    if AVGphredQ1[read] < AVG_PHRED_CUTOFF or \\\n",
    "        AVGphredQ1[read] < AVG_PHRED_CUTOFF or \\\n",
    "        basesWphredQunderCutoff1[read] > BAD_BASES_ALLOWED or \\\n",
    "        basesWphredQunderCutoff2[read] > BAD_BASES_ALLOWED:\n",
    "        highQuality.append(False)\n",
    "    else:\n",
    "        highQuality.append(True)\n",
    "        \n",
    "# These modules would add in additional columns that count instances of each barcode and mutation    \n",
    "    \n",
    "# # Count instances of a barcode\n",
    "# for read, barcode in enumerate(barcodeConsensus):\n",
    "#     if barcode != DUMMY_BARCODE:\n",
    "#         barcodeAppearances.append(int(barcodeConsensus.count(barcode)))\n",
    "#     else:\n",
    "#         barcodeAppearances.append(None)\n",
    "        \n",
    "# # Count instances of a mutation\n",
    "# for read, mutation in enumerate(singleMutation):\n",
    "#     if mutation != DUMMY_MUTATION and mutation != 'More than one':\n",
    "#         mutationAppearances.append(int(singleMutation.count(mutation)))\n",
    "#     else:\n",
    "#         mutationAppearances.append(None)\n",
    "        \n",
    "untrimmed_data = {\n",
    "    'Read ID': readIDs,\n",
    "#     'Sequence1': sequences1,\n",
    "#     'Sequence2': sequences2,\n",
    "#     'translation1': translations1,\n",
    "#     'translation2': translations2,\n",
    "#     'Average phredQ1': AVGphredQ1,\n",
    "#     'Average phredQ2': AVGphredQ2,\n",
    "#     'Number of bases with phredQ under {} read 1'.format(LETTER_QUALITY_CUTOFF): basesWphredQunderCutoff1,\n",
    "#     'Number of bases with phredQ under {} read 2'.format(LETTER_QUALITY_CUTOFF): basesWphredQunderCutoff2,\n",
    "    'High quality read pair' : highQuality,\n",
    "#     'Is there a barcode in read 1?' : barcodePresence1,\n",
    "#     'Is there a barcode in read 2?' : barcodePresence2,\n",
    "#     'Nonbarcode read start position1' : nonBarcodeReadAlignment1,\n",
    "#     'Nonbarcode read start position2' : nonBarcodeReadAlignment2,\n",
    "#     'Barcode sequence1' : barcodeList1,\n",
    "#     'Barcode sequence2' : barcodeList2,\n",
    "    'Barcode' : barcodeConsensus,\n",
    "#     'Barcode appearances' : barcodeAppearances,\n",
    "#     'Mutation1' : mutation1,\n",
    "#     'Mutation2' : mutation2,\n",
    "    'Single mutation' : singleMutation,\n",
    "#     'Mutation appearances' : mutationAppearances,\n",
    "#     'Mutations in read 1' : numberOfMutations1,\n",
    "#     'Mutations in read 2' : numberOfMutations2,\n",
    "#     'Mutated codon 1' : mutCodon1,\n",
    "#     'Mutated codon 2' : mutCodon2,\n",
    "    'Single mutation codon' : singMutCodon,\n",
    "#     'Allowed mutation1' : allowedMut1,\n",
    "#     'Allowed mutation2' : allowedMut2,\n",
    "    'Allowed single mutation' : allowedMut\n",
    "    }\n",
    "\n",
    "dfRaw = pd.DataFrame(untrimmed_data)\n",
    "dfRaw.to_csv(FILE_NAME + '_processed_df.csv')\n",
    "\n",
    "print('finished adding to dataframe: ' + str(time.perf_counter() - startTime) + ' seconds')\n",
    "\n",
    "dfRaw.head(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total reads: 1287697\n",
      "Total reads with barcode: 1223071\n",
      "Low quality reads: 226475\n",
      "High quality reads with no barcode: 26308\n",
      "High quality with barcode no mutations (WT): 835367\n",
      "High quality with barcode multiple mutations: 25692\n",
      "High quality with barcode and one allowed mutation: 144581\n",
      "High quality with barcode and one unallowed mutation: 29274\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Make dataframes with subsets\n",
    "# dfAllowedSingle is the dataframe we will want to be the biggest at the end\n",
    "\n",
    "totalCounts = str(len(dfRaw))\n",
    "\n",
    "barcodeFound = dfRaw[np.not_equal(dfRaw['Barcode'],(DUMMY_BARCODE))]\n",
    "\n",
    "highQCheck = dfRaw['High quality read pair'] == True\n",
    "barcodeCheck = dfRaw['Barcode'] != DUMMY_BARCODE\n",
    "WTCheck = dfRaw['Single mutation'] == DUMMY_MUTATION\n",
    "singleMutCheck = (dfRaw['Single mutation'] != 'More than one') & (dfRaw['Single mutation'] != DUMMY_MUTATION)\n",
    "multMutCheck = dfRaw['Single mutation'] == 'More than one'\n",
    "allowedCheck = dfRaw['Allowed single mutation'] == True\n",
    "\n",
    "dfHighQ = dfRaw[highQCheck]\n",
    "dfBC = dfRaw[barcodeCheck]\n",
    "dfHQBC = dfRaw[highQCheck & barcodeCheck]\n",
    "dfLowQ = dfRaw[~highQCheck]\n",
    "dfHQNoBC = dfRaw[highQCheck & ~barcodeCheck]\n",
    "dfHQBCWT = dfRaw[highQCheck & barcodeCheck & WTCheck]\n",
    "dfHQmult = dfRaw[highQCheck & barcodeCheck & multMutCheck]\n",
    "dfUnallowedSingle = dfRaw[highQCheck & barcodeCheck & singleMutCheck & ~allowedCheck]\n",
    "dfAllowedSingle = dfRaw[highQCheck & barcodeCheck & singleMutCheck & allowedCheck]\n",
    "\n",
    "lowQCounts = len(dfLowQ)\n",
    "howManyBarcodesFound = len(dfBC)\n",
    "noBarcodeCounts = len(dfHQNoBC)\n",
    "WTcounts = len(dfHQBCWT)\n",
    "multMutCounts = len(dfHQmult)\n",
    "SMallowedCounts = len(dfAllowedSingle)\n",
    "SMunallowedCounts = len(dfUnallowedSingle)\n",
    "\n",
    "print('Total reads: ' + totalCounts)\n",
    "print('Total reads with barcode: ' + str(howManyBarcodesFound))\n",
    "print('Low quality reads: ' + str(lowQCounts))\n",
    "print('High quality reads with no barcode: ' + str(noBarcodeCounts))\n",
    "print('High quality with barcode no mutations (WT): ' + str(WTcounts))\n",
    "print('High quality with barcode multiple mutations: ' + str(multMutCounts))\n",
    "print('High quality with barcode and one allowed mutation: ' + str(SMallowedCounts))\n",
    "print('High quality with barcode and one unallowed mutation: ' + str(SMunallowedCounts))\n",
    "\n",
    "# Pie chart, where the slices will be ordered and plotted counter-clockwise:\n",
    "labels = 'WT', 'Single allowed mutation', 'Unallowed mutation', 'Multiple mutations', 'No barcode', 'Low quality'\n",
    "sizes = [WTcounts, SMallowedCounts, SMunallowedCounts, multMutCounts, noBarcodeCounts, lowQCounts]\n",
    "\n",
    "fig1, ax1 = plt.subplots()\n",
    "ax1.pie(sizes, labels=labels, autopct='%1.1f%%',\n",
    "        shadow=False, startangle=90)\n",
    "ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n",
    "\n",
    "plt.savefig(FILE_NAME + '_readtypePieChart.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1223071\n",
      "112718\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# This is a graph subsampling the barcodes looking for uniques\n",
    "# This takes a long time to run, might need to edit for larger datasets\n",
    "cumulativeBarcodes = []\n",
    "uniqueBarcodes = []\n",
    "howOftenToSample = 10000\n",
    "print(dfBC['Barcode'][:].count())\n",
    "print(len(dfBC['Barcode'][:].value_counts()))\n",
    "for read, barcode in enumerate(dfBC['Barcode'][:]):\n",
    "    if read % howOftenToSample == 0:\n",
    "        cumulativeBarcodes.append(dfBC['Barcode'][:read].count())\n",
    "        uniqueBarcodes.append(len(dfBC['Barcode'][:read].value_counts()))\n",
    "\n",
    "plt.scatter(cumulativeBarcodes, uniqueBarcodes)\n",
    "plt.title('Barcode subsampling')\n",
    "plt.xlabel('Barcodes in subsample')\n",
    "plt.ylabel('Unique barcodes in subsample')\n",
    "plt.savefig(FILE_NAME + '_barcodeSubsampling.pdf')\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total reads: \n",
      "1287697\n",
      "Total unique barcodes: \n",
      "112718\n",
      "Total unique barcodes in high quality reads: \n",
      "81102\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Total reads\n",
    "print('Total reads: ')\n",
    "print(str(len(dfRaw)))\n",
    "\n",
    "# Total unique barcodes\n",
    "print('Total unique barcodes: ')\n",
    "print(str(len(dfBC['Barcode'].value_counts())))\n",
    "# print(dfBC['Barcode'].value_counts())\n",
    "\n",
    "# Unique barcodes in high quality reads\n",
    "print('Total unique barcodes in high quality reads: ')\n",
    "print(str(len(dfHQBC['Barcode'].value_counts())))\n",
    "plt.hist(dfHQBC['Barcode'].value_counts(), bins = range(0,50,1))\n",
    "plt.title('Barcode frequency distribution')\n",
    "plt.xlabel('Barcodes')\n",
    "plt.ylabel('Frequency')\n",
    "plt.savefig(FILE_NAME + '_uniqueBarcodesHist.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# This is a histogram of how often each barcode appears on a log scale\n",
    "# I include all barcodes here irrespective of mutations, allowed or otherwise\n",
    "plt.hist(dfHQBC['Barcode'].value_counts(), bins = range(0,100,1))\n",
    "plt.yscale('log')\n",
    "plt.title('Barcode frequency distribution')\n",
    "plt.xlabel('Barcodes')\n",
    "plt.ylabel('Frequency')\n",
    "plt.savefig(FILE_NAME + '_totalBarcodeDist.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total reads with allowed mutations (also high quality and with a barcode): \n",
      "144581\n",
      "Total unique allowed mutations in high quality reads with barcodes: \n",
      "1195\n",
      "Mutation frequency distribution: \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Unique allowed mutations in reads with barcodes and high quality reads\n",
    "# (this includes \"none\" and \"multiple\" as values)\n",
    "print('Total reads with allowed mutations (also high quality and with a barcode): ')\n",
    "print(str(len(dfAllowedSingle)))\n",
    "print('Total unique allowed mutations in high quality reads with barcodes: ')\n",
    "print(str(len(dfAllowedSingle['Single mutation'].value_counts())))\n",
    "print('Mutation frequency distribution: ')\n",
    "plt.hist(dfAllowedSingle['Single mutation'].value_counts(), bins = range(0,200,1))\n",
    "plt.title('Mutation frequency distribution')\n",
    "plt.xlabel('Mutations')\n",
    "plt.ylabel('Frequency')\n",
    "plt.savefig(FILE_NAME + '_uniqueMutationsHist.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# This is a histogram of how many unique mutations each barcode has\n",
    "MutsperBarc = dfAllowedSingle.groupby('Barcode')['Single mutation'].nunique()\n",
    "plt.hist(MutsperBarc, bins = range(0,20,1))\n",
    "plt.title('Unique mutations per barcode')\n",
    "plt.xlabel('Unique mutations')\n",
    "plt.ylabel('Barcoes with that many unique mutations')\n",
    "plt.savefig(FILE_NAME + '_uniqueMutationsPerBarcode.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of reads with barcodes that have only one mutation is: 43701\n",
      "The number of barcodes with one mutation is: 22616\n",
      "The number of mutations that this covers is: 1161\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/noamprywes/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "# Generate lookup table between barcode and mutant for barcodes with only one mutation\n",
    "# First add a column that counts unique mutations for a given barcode\n",
    "# Then remove barcodes with more than one muation\n",
    "# Generate a lookup table\n",
    "\n",
    "dfAllowedSingle['Unique mutations'] = dfAllowedSingle.groupby(['Barcode'])['Single mutation'].transform('nunique')\n",
    "\n",
    "onlyUniqueCheck = dfAllowedSingle['Unique mutations'] == 1\n",
    "dfOnlyUniques = dfAllowedSingle[onlyUniqueCheck]\n",
    "\n",
    "print('The number of reads with barcodes that have only one mutation is: ' + \\\n",
    "      str(len(dfOnlyUniques['Barcode'])))\n",
    "\n",
    "print('The number of barcodes with one mutation is: ' + str(len(dfOnlyUniques['Barcode'].value_counts())))\n",
    "print('The number of mutations that this covers is: ' + str(len(dfOnlyUniques['Single mutation'].value_counts())))\n",
    "\n",
    "dfOnlyUniques.to_csv(FILE_NAME + '_lookup_table.csv', columns = ['Barcode','Single mutation'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1161\n",
      "1145\n",
      "925\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# This is a histogram of how many unique barcodes each mutation has\n",
    "# I have excluded barcodes with more than one mutation\n",
    "BarcsperMut = dfOnlyUniques.groupby('Single mutation')['Barcode'].nunique()\n",
    "print(str(len(BarcsperMut)))\n",
    "print((BarcsperMut > 2).sum())\n",
    "print((BarcsperMut > 9).sum())\n",
    "\n",
    "plt.hist(BarcsperMut, bins = range(0,100,1))\n",
    "plt.title('Unique barcodes per mutation')\n",
    "plt.xlabel('Unique barcodes')\n",
    "plt.ylabel('Mutations with that many unique barcodes')\n",
    "plt.savefig(FILE_NAME + '_uniqueBarcodesPerMutation.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'Position'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m~/anaconda3/lib/python3.6/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2888\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2889\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2890\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'Position'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-12-10e3be988561>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0mdfPositionAAanalyzed\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFILE_NAME\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'_mutationsByPosition.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m \u001b[0mdfPositionAAanalyzed\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Position'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;31m# plt.scatter(dfPositionAAanalyzed['Position'], dfPositionAAanalyzed['Amino acid'])\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.6/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2897\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2898\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2899\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2900\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2901\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.6/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2889\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2890\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2891\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2892\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2893\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtolerance\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'Position'"
     ]
    }
   ],
   "source": [
    "# Make a graph showing how many mutants I have at each position of the protein\n",
    "# Ideally I would have 19 mutants at each position\n",
    "\n",
    "def getMutPosition(mutation):\n",
    "    return int(mutation[1:-1])\n",
    "\n",
    "def getMutAA(mutation):\n",
    "    return mutation[-1:]\n",
    "\n",
    "foundMutPos = []\n",
    "foundMutAA = []\n",
    "\n",
    "for mutant in dfOnlyUniques['Single mutation']:\n",
    "    if mutant != DUMMY_MUTATION:\n",
    "        foundMutPos.append(getMutPosition(mutant))\n",
    "        foundMutAA.append(getMutAA(mutant))\n",
    "        \n",
    "        \n",
    "mutationPositionData = {'Position' : foundMutPos , 'Amino acid' : foundMutAA}\n",
    "\n",
    "dfPositionAA = pd.DataFrame(mutationPositionData)\n",
    "\n",
    "mutationsByPosition = dfPositionAA.groupby('Position')['Amino acid'].nunique()\n",
    "\n",
    "dfPositionAAanalyzed = pd.DataFrame(mutationsByPosition)\n",
    "\n",
    "dfPositionAAanalyzed.to_csv(FILE_NAME + '_mutationsByPosition.csv')\n",
    "\n",
    "dfPositionAAanalyzed['Position'].head()\n",
    "\n",
    "# plt.scatter(dfPositionAAanalyzed['Position'], dfPositionAAanalyzed['Amino acid'])\n",
    "# plt.title('How many mutations per position')\n",
    "# plt.xlabel('amino acid position in rbcL')\n",
    "# plt.ylabel('Mutations at that position')\n",
    "# plt.savefig(FILE_NAME + '_mutationsByPosition.pdf')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
